name: Deploy Github Management Workflow

on:
  workflow_dispatch:
    inputs:
      selected_environment:
        type: choice
        description: SELECT ENVIRONMENT
        required: true
        default: dev
        options: 
        - prod
        - uat
        - dev

env:
  PROJECT_NAME: ${{github.event.inputs.selected_environment}}-gh-mgmt-app

jobs:
  deploy-in-acr:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src/goapp
    steps:
      - uses: actions/checkout@v2
      - uses: azure/docker-login@v1 
        with:
          login-server: ${{ secrets.ACR_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - run: |
          docker build . -t ${{ secrets.ACR_REGISTRY }}/${{ env.PROJECT_NAME }}:${{ github.sha }} -t ${{ secrets.ACR_REGISTRY }}/${{ env.PROJECT_NAME }}:latest
          docker push ${{ secrets.ACR_REGISTRY }}/${{ env.PROJECT_NAME }}

  build-and-deploy:
    runs-on: ubuntu-latest
    steps:

      # Checkout code
    - uses: actions/checkout@main

    - name: Setup Azure Credentials
      run: |
        cat > az_cred.json <<EOL
          ${{ secrets.AZURE_CREDENTIALS }}
        EOL

        TENANT_ID=`jq -r '.tenantId' az_cred.json`
        CLIENT_ID=`jq -r '.clientId' az_cred.json`
        CLIENT_SECRET=`jq -r '.clientSecret' az_cred.json`

        echo "::add-mask::$TENANT_ID"
        echo "::add-mask::$CLIENT_ID"
        echo "::add-mask::$CLIENT_SECRET"

        echo "TENANT_ID=$TENANT_ID" >> $GITHUB_ENV
        echo "CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
        echo "CLIENT_SECRET=$CLIENT_SECRET" >> $GITHUB_ENV

    - name: Setup Dev Github Credentials
      run: |
        case ${{ github.event.inputs.selected_environment }} in
          "dev")
        cat > gh_cred.json <<EOL
          ${{ secrets.GH_CREDENTIALS_DEV }}
        EOL
            ;;
          "uat")
        cat > gh_cred.json <<EOL
          ${{ secrets.GH_CREDENTIALS_UAT }}
        EOL
            ;;
        esac

        CLIENT_ID=`jq -r '.clientId' gh_cred.json`
        CLIENT_SECRET=`jq -r '.clientSecret' gh_cred.json`
        TOKEN=`jq -r '.token' gh_cred.json`

        echo "::add-mask::$CLIENT_ID"
        echo "::add-mask::$CLIENT_SECRET"
        echo "::add-mask::$TOKEN"

        echo "GH_CLIENT_ID=$CLIENT_ID" >> $GITHUB_ENV
        echo "GH_CLIENT_SECRET=$CLIENT_SECRET" >> $GITHUB_ENV
        echo "GH_TOKEN=$TOKEN" >> $GITHUB_ENV

    - name: SUBSTITUTE VARIABLES
      uses: microsoft/variable-substitution@v1 
      with:
        files: ./.bicep/webapp/${{ github.event.inputs.selected_environment }}-parameters.json
      env:
        parameters.projectName.value : ${{ env.PROJECT_NAME }}
        parameters.containerServer.value : ${{ secrets.ACR_REGISTRY }}
        parameters.appServiceSettings.value.DOCKER_REGISTRY_SERVER_URL : https://${{ secrets.ACR_REGISTRY }}
        parameters.appServiceSettings.value.DOCKER_REGISTRY_SERVER_USERNAME : ${{ secrets.ACR_USERNAME }} 
        parameters.appServiceSettings.value.DOCKER_REGISTRY_SERVER_PASSWORD : ${{ secrets.ACR_PASSWORD }} 
        parameters.appServiceSettings.value.TENANT_ID : ${{ env.TENANT_ID }}
        parameters.appServiceSettings.value.CLIENT_ID : ${{ env.CLIENT_ID }}
        parameters.appServiceSettings.value.CLIENT_SECRET : ${{ env.CLIENT_SECRET }}
        parameters.appServiceSettings.value.HOME_URL : 'https://${{ env.PROJECT_NAME }}.azurewebsites.net'
        parameters.appServiceSettings.value.EMAIL_ENDPOINT : ${{ secrets.EMAIL_ENDPOINT }}
        parameters.appServiceSettings.value.GH_CLIENT_ID : ${{ env.GH_CLIENT_ID }}
        parameters.appServiceSettings.value.GH_CLIENT_SECRET : ${{ env.GH_CLIENT_SECRET }}
        parameters.appServiceSettings.value.GH_TOKEN : ${{ env.GH_TOKEN }}
        parameters.appServiceSettings.value.GHMGMTDB_CONNECTION_STRING : ${{ secrets.GH_MGMT_CONNECTION_STRING_DEV }}

      # Log into Azure
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Deploy Bicep file
    - name: deploy
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ fromJSON(secrets.AZURE_CREDENTIALS)['subscriptionId'] }}
        resourceGroupName: ${{ secrets.AZURE_RG }}
        template: ./.bicep/webapp/main.bicep
        parameters: ./.bicep/webapp/${{ github.event.inputs.selected_environment }}-parameters.json
        failOnStdErr: false
        scope: resourcegroup